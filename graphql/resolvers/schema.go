package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"fmt"
	"my-sst-app/graphql/model"
	"my-sst-app/graphql/server"
	//  "github.com/pkg/errors"
)
func (r *queryResolver) Users(ctx context.Context) (*model.User, error) {
	// authCtx := middleware.GetAuthContext(ctx)
	// if authCtx.AccountPending {
	// 	return nil, e.New("account is pending")
	// }

	// account, err := r.UsersCtrl.GetAccountByID(ctx, "1")
	// if err != nil {
	// 	return nil, errors.Wrap(err, "failed to get current pending account")
	// }

	// return account, nil]

	fmt.Println("Users invoked")
	user := model.User{
		ID: "test",
		Name: "test",
		Email: "test@test.com",
	}
	//
	return &user, nil
}
// Mutation returns server.MutationResolver implementation.
// func (r *Resolver) Mutation() server.MutationResolver { return &mutationResolver{r} }

// Query returns server.QueryResolver implementation.
func (r *Resolver) Query() server.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
